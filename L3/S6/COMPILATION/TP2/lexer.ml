# 1 "lexer.mll"
 
open Parser
exception Eof

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\234\255\235\255\003\000\000\000\002\000\002\000\002\000\
    \243\255\001\000\001\000\246\255\247\255\006\000\250\255\251\255\
    \252\255\017\000\002\000\255\255\254\255\000\000\248\255\001\000\
    \000\000\245\255\000\000\004\000\002\000\244\255\240\255\242\255\
    \004\000\239\255\004\000\238\255\237\255\236\255\033\000\252\255\
    \253\255\011\000\004\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\021\000\021\000\021\000\021\000\014\000\
    \255\255\021\000\021\000\255\255\255\255\021\000\255\255\255\255\
    \255\255\002\000\006\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\039\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\000\000\000\000\019\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\011\000\015\000\016\000\020\000\014\000\043\000\018\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\044\000\003\000\007\000\008\000\037\000\030\000\
    \031\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\041\000\000\000\000\000\000\000\000\000\
    \042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\026\000\000\000\022\000\025\000\009\000\029\000\
    \035\000\000\000\000\000\000\000\027\000\013\000\006\000\004\000\
    \034\000\032\000\036\000\023\000\010\000\021\000\024\000\028\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\018\000\000\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\041\000\000\000\000\000\000\000\003\000\007\000\
    \007\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\038\000\255\255\255\255\255\255\255\255\
    \038\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\009\000\255\255\021\000\024\000\000\000\028\000\
    \034\000\255\255\255\255\255\255\026\000\000\000\000\000\000\000\
    \005\000\006\000\004\000\010\000\000\000\013\000\023\000\027\000\
    \032\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec anlex lexbuf =
    __ocaml_lex_anlex_rec lexbuf 0
and __ocaml_lex_anlex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 10 "lexer.mll"
                             ( anlex lexbuf (* Oubli des espacements et passages à la ligne *) )
# 127 "lexer.ml"

  | 1 ->
# 11 "lexer.mll"
                             ( coms 1 lexbuf )
# 132 "lexer.ml"

  | 2 ->
let
# 12 "lexer.mll"
                  lxm
# 138 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 12 "lexer.mll"
                             ( INT(int_of_string lxm) )
# 142 "lexer.ml"

  | 3 ->
# 13 "lexer.mll"
                             ( PLUS                   )
# 147 "lexer.ml"

  | 4 ->
# 14 "lexer.mll"
                             ( TIMES                  )
# 152 "lexer.ml"

  | 5 ->
# 15 "lexer.mll"
                             ( MINUS                  )
# 157 "lexer.ml"

  | 6 ->
# 16 "lexer.mll"
                             ( DIV                    )
# 162 "lexer.ml"

  | 7 ->
# 17 "lexer.mll"
                             ( MOD                    )
# 167 "lexer.ml"

  | 8 ->
# 18 "lexer.mll"
                             ( LPAR                   )
# 172 "lexer.ml"

  | 9 ->
# 19 "lexer.mll"
                             ( RPAR                   )
# 177 "lexer.ml"

  | 10 ->
# 20 "lexer.mll"
                             ( TRUE                   )
# 182 "lexer.ml"

  | 11 ->
# 21 "lexer.mll"
                             ( FALSE                  )
# 187 "lexer.ml"

  | 12 ->
# 22 "lexer.mll"
                             ( EQUAL                  )
# 192 "lexer.ml"

  | 13 ->
# 23 "lexer.mll"
                             ( DIF                    )
# 197 "lexer.ml"

  | 14 ->
# 24 "lexer.mll"
                             ( INF                    )
# 202 "lexer.ml"

  | 15 ->
# 25 "lexer.mll"
                             ( INFOREQ                )
# 207 "lexer.ml"

  | 16 ->
# 26 "lexer.mll"
                             ( NOT                    )
# 212 "lexer.ml"

  | 17 ->
# 27 "lexer.mll"
                             ( AND                    )
# 217 "lexer.ml"

  | 18 ->
# 28 "lexer.mll"
                             ( OR                     )
# 222 "lexer.ml"

  | 19 ->
# 29 "lexer.mll"
                             ( TERM                   )
# 227 "lexer.ml"

  | 20 ->
# 30 "lexer.mll"
                             ( raise Eof              )
# 232 "lexer.ml"

  | 21 ->
let
# 31 "lexer.mll"
          lxm
# 238 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 31 "lexer.mll"
                             ( (* Pour tout autre caractère : message sur la sortie erreur + oubli *)
                               Printf.eprintf "Unknown character '%c' ignored\n" lxm; flush stderr;
                               anlex lexbuf
                             )
# 245 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_anlex_rec lexbuf __ocaml_lex_state

and coms x lexbuf =
    __ocaml_lex_coms_rec x lexbuf 38
and __ocaml_lex_coms_rec x lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 37 "lexer.mll"
          ( coms  (x + 1)  lexbuf                                       )
# 257 "lexer.ml"

  | 1 ->
# 38 "lexer.mll"
          ( match (x-1) with 0 -> (anlex lexbuf) | y ->( coms y lexbuf) )
# 262 "lexer.ml"

  | 2 ->
# 39 "lexer.mll"
          ( failwith "Unexpected end of file"                           )
# 267 "lexer.ml"

  | 3 ->
# 40 "lexer.mll"
          ( (coms  x lexbuf)                                            )
# 272 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_coms_rec x lexbuf __ocaml_lex_state

;;

